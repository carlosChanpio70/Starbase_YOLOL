include "std/logic"
define :Scan_Button = :SB
define :Display_1 = :SD1
define :Display_2 = :SD2
define :Material = :M
define :Volume = :V
define :Index = :I
define :Scan_Results = :SR
define :Reset_Results = :RR
//Tier Volumes//
define Tier_01 = 6557
define Tier_02 = 7945
define Tier_03 = 11555
define Tier_04 = 12851
define Tier_05 = 17763
define Tier_06 = 19603
define Tier_07 = 45929
define Tier_08 = 31351
define Tier_09 = 215837
define Tier_10 = 468058
//Tier Max Efficiency ratings//
define MaxEF_01 = 17
define MaxEF_02 = 35
define MaxEF_03 = 69
define MaxEF_04 = 69
define MaxEF_05 = 28
define MaxEF_06 = 27
define MaxEF_07 = 28
define MaxEF_08 = 11
define MaxEF_09 = 69
define MaxEF_10 = 69
define Happy = " :D"
define Sad = " D:"

//Checks for the Scan button status//
if :Scan_button then
    //Sets variables//
    line_skip = "\n"
    line_skip2 = line_skip+line_skip
    Max_EF_tx = "% Max\nEfficiency:"
    kv = "kv"+line_skip
    while :Scan_Results==0 do
        :Scan = 1
    end
    //Sets variables//
    P100 = 100
    Ore = "Ore"
    Crystal = "Crystal"
    Tier_tx = line_skip+"Tier: "
    if :Scan_Results!=2 then
        //Handle no asteroid scanned//
        Display_1 = line_skip2+"Bad Target"
        Display_2 = Display_1
    else
        //Scanner Results handling//
        :Index = 0
        M1 = (:Material-Ore-Crystal)+line_skip
        V1 = :Volume $
        :Index = 1
        M2 = (:Material-Ore-Crystal)+line_skip
        V2 = :Volume
        //Stack calculations//
        Stack_Res_1 = V1/(1728*P100)*P100
        Stack_Res_2 = V2/(1728*P100)*P100
        Total_Stacks = line_skip+(Stack_Res_1+Stack_Res_2)
        //Display Scan Results//
        Display_1 = M1+V1+kv+M2+V2+kv+Stack_Res_1+"|"+Stack_Res_2+Total_Stacks+" Total"
        Volume = (V1+V2)
        //Tier selection//
        if (Volume-Tier_01)<=0 then
            Tier=1+line_skip
            Max_EF = MaxEF_01
        end
        if (Volume-Tier_02)<=0 then
            Tier=2+line_skip
            Max_EF = MaxEF_02
        end
        if (Volume-Tier_03)<=0 then
            Tier=3+line_skip
            Max_EF = MaxEF_03
        end
        if (Volume-Tier_04)<=0 then
            Tier=4+line_skip
            Max_EF = MaxEF_04
        end
        if (Volume-Tier_05)<=0 then
            Tier=5+line_skip
            Max_EF = MaxEF_05
        end
        if (Volume-Tier_06)<=0 then
            Tier=6+line_skip
            Max_EF = MaxEF_06
        end
        if (Volume-Tier_08)<=0 then
            Tier=8+line_skip
            Max_EF = MaxEF_08
        end
        if (Volume-Tier_07)<=0 then
            Tier=7+line_skip
            Max_EF = MaxEF_07
        end
        if (Volume-Tier_09)<=0 then
            Tier=9+line_skip
            Max_EF = MaxEF_09
        end
        if (Volume-Tier_10)<=0 then
            Tier=10+line_skip
            Max_EF = MaxEF_10
        end
        // Efficiency and score calculus//
        EF = line_skip+(V2/Volume)*P100
        RScore = (EF/Max_EF)*P100
        Score_results = line_skip+(RScore + "/100")
        // :D //
        if RScore <= 50 then
          Score_results = Score_results + Sad
        else
          Score_results = Score_results + Happy
        end 
        //Display Results//
        Display_2 = Tier_tx+Tier+Max_EF+Max_EF_tx+EF+"%\nRock Score:"+Score_results
    end
end
if :Scan_button==0 then
    //Display if Offline//
    Display_1 = line_skip2+"  Offline"
    Display_2 = Display_1
end
//Output Display//
:Display_1 = Display_1
:Display_2 = Display_2
//Reset//
:Reset_Results = 1
//Scanner_2_Ores_Tiers code made by carlosChanpio70 / Carlos & Nax//